@startuml Class Diagram 1

skinparam linetype ortho

class Ranger {
    ...
    -stressLevel : int {getter}

    +Ranger(...)
    +getStressLevel() : int
    +increaseStress(int level) : void
    +decreaseStress(int level) : void
    +treatAnimal(Animal animal) : void
    -attemptToTreatAnimal(Animal animal) : boolean
}

note left of Ranger::Ranger
    Ranger(...) {
        ...
        this.stressLevel := 0
    }
end note

note left of Ranger::getStressLevel
    getStressLevel() {
        return stressLevel
    }
end note

note right of Ranger::increaseStressLevel
    increaseStressLevel(int level) {
        stressLevel += level
    }
end note

note right of Ranger::decreaseStressLevel
    decreaseStressLevel(int level) {
        stressLevel -= level
    }
end note

abstract class Temperament {
    #getAnimalState() : AnimalState
}

class PassiveAnimal extends Temperament {
    +getAnimalState() : AnimalState
}

note left of PassiveAnimal::getAnimalState
    getAnimalState() {
        return AnimalState.ALERTED
    }
end note

class AggressiveAnimal extends Temperament {
    +getAnimalState() : AnimalState
}

note left of AggressiveAnimal::getAnimalState
    getAnimalState() {
        return AnimalState.AGGRESSIVE
    }
end note

class DefensiveAnimal extends Temperament {
    +getAnimalState() : AnimalState
}

note left of DefensiveAnimal::getAnimalState
    getAnimalState() {
        return AnimalState.DEFENSIVE
    }
end note

class CuriousAnimal extends Temperament {
    +getAnimalState() : AnimalState
}

note left of CuriousAnimal::getAnimalState
    getAnimalState() {
        return AnimalState.CURIOUS
    }
end note

enum State {
    CALM
    ALERTED
    DEFENSIVE
    CURIOUS
    AGGRESSIVE
    FLEEING
    ATTACKING
    STABILIZED
    CRITICAL
}

class Animal {
    -temperament : Temperament {getter, setter}
    -state : State {getter, setter}

    +Animal(...)
    +getTemperament() : Temprament
    +setTemperament(Temprament temperament) : void
    +injure() : void
    +stabilize() : void
    +applyInjury() : void
    +reactToRanger(Ranger ranger) : void
}

note left of Animal::Animal
    Animal(..., temperament) <<Updated>> {
        ...
        this.temperament := temperament
        this.state := AnimalState.CALM
    }
end note

enum Equipment {
    TRANQUILIZER_KIT
    MEDICAL_KIT
}

class Vehicle {
    ...
    -equipments: Map<Equipment, int> {getter}

    +Vehicle(...)
    +getEquipments() : Map<Equipment, int>
    +hasEquipment(Equipment equipment) : boolean
    +addEquipment(Equipment equipment) : void
    +removeEquipment(Equipment equipment) : void
}

note left of Vehicle::Vehicle
    Vehicle(...) {
        ...
        this.equipments := new HashMap<Equipment, int>()
    }
end note

note right of Vehicle::getEquipments
    getEquipments() {
        return ths.equipments
    }
end note

note right of Vehicle::hasEquipment
    hasEquipment(Equipment equipment) {
        return equipments.containsKey(equipment)
    }
end note

Animal --- Temprament : <<uses>>
Animal --- State : <<uses>>

Vehicle --- Equipment : <<uses>>
Ranger --- Vehicle : <<uses>>
Ranger --- Animal : <<uses>>

@enduml