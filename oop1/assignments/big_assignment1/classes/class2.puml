@startuml Class Diagram 2
scale 2

skinparam linetype ortho

abstract class Person {
    #power : int {getter}

    #Person(...)
    +getPower() : int
}

class Ranger {
    -name : String
    -experience : int
    -efficiency : int

    +Ranger(...)
    +treatAnimal(animal : Animal) : void
    +fightPoacher(poacher : Poacher) : void
    +patrol(Habitat habitat, List<Poacher> poachers) : void
}

note right of Ranger::treatAnimal
    treatAnimal(animal) {
        animal.heal(efficiency)
        animal.decreaseStress(efficiency)
    }
end note

note right of Ranger::fightPoacher
    fightPoacher(poacher) {
        if (power > poacher.getPower()) {
            poacher.defeated := true
        } else {
            poacher.defeated := false
        }
    }
end note

class Poacher {
    -target : String {getter, setter}
    -dangerLevel : int {getter, setter}
    -habitat : Habitat {getter, setter}
    -defeated : boolean {getter, setter}

    +Poacher(...)
    +invade(Habitat habitat) : void
}

class Animal {
    -species : String {getter}
    -health : int {getter}
    -stressLevel : int {getter}

    +Animal(...)
    +increaseStress(int amount) : void
    +decreaseStress(int amount) : void
    +heal(int amount) : void
    +hurtAnimal(int amount) : void
    +needsHelp() : boolean
}

note right of Animal::increaseStress
    increaseStress(amount) {
        stressLevel += amount
        if (stressLevel > 100) {
            stressLevel := 100
        }
    }
end note

note right of Animal::decreaseStress
    decreaseStress(amount) {
        stressLevel -= amount
        if (stressLevel < 0) {
            stressLevel := 0
        }
    }
end note

note left of Animal::heal
    heal(amount) {
        health += amount
        if (health > 100) {
            health := 100
        }
    }
end note

note left of Animal::hurtAnimal
    hurtAnimal(amount) {
        health -= amount
        if (health < 0) {
            health := 0OOP
        }
    }
end note

class Habitat {
    -name : String {getter}
    -capacity : int {getter}
    -animals : List<Animal>

    +Habitat(...)
    +addAnimal(animal : Animal) : boolean
    +removeAnimal(animal : Animal) : boolean
}

note right of Habitat::addAnimal
    addAnimal(animal) {
        if (animals.size() < capacity) {
            animals.add(animal)
            return true
        } else {
            return false
        }
    }
end note

note left of Habitat::removeAnimal
    removeAnimal(animal) {
        return animals.remove(animal)
    }
end note

class Vehicle {
    -id : String {getter}
    -fuelLevel : int {getter}
    -capacity : int {getter}

    +Vehicle(...)
    +refuel(int amount) : void
    +deploy() : boolean
}

note right of Vehicle::refuel
    refuel(amount) {
        fuelLevel += amount
        if (fuelLevel > 100) {
            fuelLevel := 100
        }
    }
end note

note left of Vehicle::deploy
    deploy() {
        if (fuelLevel > 10) {
            fuelLevel := fuelLevel - 10
            return true
        }
        return false
    }
end note

Ranger -down-|> Person
Ranger -- Habitat
Ranger -- Vehicle
Ranger -- Animal

Poacher -down-|> Person
Poacher -- Habitat 
Poacher -- Animal

Animal "0..*" --* Habitat

Person -[hidden]-> Ranger
Person -[hidden]-> Poacher
Ranger -[hidden]-> Habitat
Poacher -[hidden]-> Habitat
Habitat -[hidden]-> Animal
Ranger -[hidden]-> Vehicle

@enduml